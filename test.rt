A  0.9   255,255,255
L  10,10,-10   0.9   255,255,255
C  0,0,-10   0,0,1   100

sp 0.0,0.0,0.0 3.0 200,200,100

#  座標{0, 0, 0}に球を置く。カメラを球体に向けて、レンダリング画像を表示します。球体はグリッチなしで見え、表示されなければなりません。
# - z' 値が null の平面を置きます。カメラが平面を向いている状態で、レンダリング画像を表示します。平面はグリッチなしで見え、表示されるはずです。
# - y軸に沿って伸びる円柱を置きます。カメラが円柱を向いている状態で、レンダリング画像を表示します。円柱はグリッチなしで見え、表示されなければならない。


# - 座標{0, 0, 0}に2つの球を置きます、
# カメラはその球を向く。次に、2つの球体の一方を平行移動
# カメラの方向と平行な方向に、球の直径よりも大きな距離で平行移動させ、レンダリングされた画像を表示する。
# そしてレンダリングされた画像を表示する。両方の球がグリッチすることなく表示されなければならない。
# - y軸に沿って伸びる円柱を置き、カメラは円柱の方を向く。
# 次にz軸に沿って90°回転（PI/2ラジアン）させレンダリングされた画像を表示する。円柱がグリッチなしで見え、表示されなければならない。


# - 例えば球と円柱のような、交差する複数のオブジェクトをシーン上に配置し、レンダリングされた画像を表示してください。両方のオブジェクトがグリッチなしで見え、表示されなければなりません。(特に両方のオブジェクトが交差しているところ）
# - 同じテストを実行するが、同じオブジェクトを複数回配置できることを確認する。例えば、2つの円柱、2つの球、平面など。


# - ランダムなシーンを生成し、座標{0,0,0}の方向に向けられたx軸に沿って伸びるカメラを配置し、レンダリングされた画像を表示する。シーンはグリッチなしで表示されなければならない。
# - ランダムなシーンを生成し、座標{0, 0, 0}の方向に向けられたy軸に沿って伸びるカメラを配置し、レンダリングされた画像を表示します。シーンはグリッチなしで表示されなければならない。
# - ランダムなシーンを生成し、z軸に沿って座標{0, 0, 0}の方向に伸びるカメラを配置し、レンダリングされた画像を表示します。シーンはグリッチなしで表示されなければならない。
# - ランダムなシーンを生成し、座標{0, 0, 0}の方向に向けて、どの軸にも対角線にもないランダムな位置にカメラを配置し、レンダリングされた画像を表示します。シーンはグリッチなしで表示されなければならない。


# - 座標{0, 0, 0}に球を置き、カメラは球の方を向き、カメラの左右にスポットを置きますが、球が横向きに照らされるように配置します。
# レンダリング画像を表示する。球体が見え、照らされ、グリッチなしで表示されなければならない。
# - 球体を平行移動の結果の座標に置き、カメラを球体に向け、スポットをカメラの左か右に置きますが、球体が横向きに照らされるように配置します。
# レンダリング画像を表示する。球体は見え、適切に照らされ、グリッチなしで表示されなければならない。適切にとは、光の輪が平行移動前ではなく、平行移動後に計算されることを意味します。



# - 垂直スポット、球、平面を配置します。スポットが球の位置を照らし、球の影を平面に作る。カメラを脇に置き、球体、平面、平面上の球体の影が見えるようにする。影はグリッチせずに正しく表示されなければならない。
# - イラストV.6 P.10にあるような、複数のオブジェクトがある複雑なシーンを配置する。影がグリッチせずに正しく表示されなければならない。